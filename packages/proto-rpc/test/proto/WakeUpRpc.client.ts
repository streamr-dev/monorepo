// @generated by protobuf-ts 2.8.1 with parameter server_generic,generate_dependencies
// @generated from protobuf file "WakeUpRpc.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WakeUpRpcService } from "./WakeUpRpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "./google/protobuf/empty";
import type { WakeUpRequest } from "./WakeUpRpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service WakeUpRpcService
 */
export interface IWakeUpRpcServiceClient {
    /**
     * @generated from protobuf rpc: wakeUp(WakeUpRequest) returns (google.protobuf.Empty);
     */
    wakeUp(input: WakeUpRequest, options?: RpcOptions): UnaryCall<WakeUpRequest, Empty>;
}
/**
 * @generated from protobuf service WakeUpRpcService
 */
export class WakeUpRpcServiceClient implements IWakeUpRpcServiceClient, ServiceInfo {
    typeName = WakeUpRpcService.typeName;
    methods = WakeUpRpcService.methods;
    options = WakeUpRpcService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: wakeUp(WakeUpRequest) returns (google.protobuf.Empty);
     */
    wakeUp(input: WakeUpRequest, options?: RpcOptions): UnaryCall<WakeUpRequest, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<WakeUpRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
