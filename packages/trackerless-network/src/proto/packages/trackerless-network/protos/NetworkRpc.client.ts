// @generated by protobuf-ts 2.8.0 with parameter server_generic,generate_dependencies
// @generated from protobuf file "packages/trackerless-network/protos/NetworkRpc.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { NetworkRpc } from "./NetworkRpc";
import type { NeighborUpdate } from "./NetworkRpc";
import type { InterleaveNotice } from "./NetworkRpc";
import type { LeaveStreamNotice } from "./NetworkRpc";
import type { HandshakeResponse } from "./NetworkRpc";
import type { HandshakeRequest } from "./NetworkRpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "../../../google/protobuf/empty";
import type { StreamMessage } from "./NetworkRpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service NetworkRpc
 */
export interface INetworkRpcClient {
    /**
     * @generated from protobuf rpc: sendData(StreamMessage) returns (google.protobuf.Empty);
     */
    sendData(input: StreamMessage, options?: RpcOptions): UnaryCall<StreamMessage, Empty>;
    /**
     * @generated from protobuf rpc: handshake(HandshakeRequest) returns (HandshakeResponse);
     */
    handshake(input: HandshakeRequest, options?: RpcOptions): UnaryCall<HandshakeRequest, HandshakeResponse>;
    /**
     * @generated from protobuf rpc: leaveStreamNotice(LeaveStreamNotice) returns (google.protobuf.Empty);
     */
    leaveStreamNotice(input: LeaveStreamNotice, options?: RpcOptions): UnaryCall<LeaveStreamNotice, Empty>;
    /**
     * @generated from protobuf rpc: interleaveNotice(InterleaveNotice) returns (google.protobuf.Empty);
     */
    interleaveNotice(input: InterleaveNotice, options?: RpcOptions): UnaryCall<InterleaveNotice, Empty>;
    /**
     * @generated from protobuf rpc: neighborUpdate(NeighborUpdate) returns (NeighborUpdate);
     */
    neighborUpdate(input: NeighborUpdate, options?: RpcOptions): UnaryCall<NeighborUpdate, NeighborUpdate>;
}
/**
 * @generated from protobuf service NetworkRpc
 */
export class NetworkRpcClient implements INetworkRpcClient, ServiceInfo {
    typeName = NetworkRpc.typeName;
    methods = NetworkRpc.methods;
    options = NetworkRpc.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: sendData(StreamMessage) returns (google.protobuf.Empty);
     */
    sendData(input: StreamMessage, options?: RpcOptions): UnaryCall<StreamMessage, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamMessage, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: handshake(HandshakeRequest) returns (HandshakeResponse);
     */
    handshake(input: HandshakeRequest, options?: RpcOptions): UnaryCall<HandshakeRequest, HandshakeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<HandshakeRequest, HandshakeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: leaveStreamNotice(LeaveStreamNotice) returns (google.protobuf.Empty);
     */
    leaveStreamNotice(input: LeaveStreamNotice, options?: RpcOptions): UnaryCall<LeaveStreamNotice, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<LeaveStreamNotice, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: interleaveNotice(InterleaveNotice) returns (google.protobuf.Empty);
     */
    interleaveNotice(input: InterleaveNotice, options?: RpcOptions): UnaryCall<InterleaveNotice, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<InterleaveNotice, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: neighborUpdate(NeighborUpdate) returns (NeighborUpdate);
     */
    neighborUpdate(input: NeighborUpdate, options?: RpcOptions): UnaryCall<NeighborUpdate, NeighborUpdate> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<NeighborUpdate, NeighborUpdate>("unary", this._transport, method, opt, input);
    }
}
