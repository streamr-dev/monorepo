syntax = "proto3";

option optimize_for = CODE_SIZE;

import "google/protobuf/empty.proto";
import "packages/dht/protos/DhtRpc.proto";

service NetworkRpc {
  rpc sendData (DataMessage) returns (google.protobuf.Empty);
  rpc handshake (HandshakeRequest) returns (HandshakeResponse);
  rpc leaveNotice (LeaveNotice) returns (google.protobuf.Empty);
  rpc interleaveNotice (InterleaveNotice) returns (google.protobuf.Empty);
  rpc neighborUpdate (NeighborUpdate) returns (NeighborUpdate);
}

message MessageRef {
  int64 timestamp = 1;
  int32 sequenceNumber = 2;
}

message DataMessage {
  string content = 1;
  string senderId = 2;
  string streamPartId = 3;
  MessageRef messageRef = 4;
  optional MessageRef previousMessageRef = 5;
  optional string previousPeer = 6;
}

message Layer2Message {
  Layer2Type type = 1;
}

enum Layer2Type {
  Data = 0;
}

message HandshakeRequest {
  string randomGraphId = 1;
  string senderId = 2;
  string requestId = 3;
  optional string concurrentHandshakeTargetId = 4;
  repeated string neighbors = 5;
  repeated string peerView = 6;
  PeerDescriptor senderDescriptor = 7;
  bool interleaving = 8;
}

message HandshakeResponse {
  bool accepted = 1;
  string requestId = 2;
  optional PeerDescriptor interleaveTarget = 3;
}

message InterleaveNotice {
  string senderId = 1;
  string randomGraphId = 2;
  PeerDescriptor interleaveTarget = 3;
}

message LeaveNotice {
  string randomGraphId = 1;
  string senderId = 2;
}

message NeighborUpdate {
  string senderId = 1;
  string randomGraphId = 2;
  repeated PeerDescriptor neighborDescriptors = 4;
}