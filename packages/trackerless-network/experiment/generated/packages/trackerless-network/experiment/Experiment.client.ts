// @generated by protobuf-ts 2.9.4 with parameter server_generic,generate_dependencies,long_type_number
// @generated from protobuf file "packages/trackerless-network/experiment/Experiment.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RoutingExperimentRpc } from "./Experiment";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RoutingPath } from "./Experiment";
import type { GetRoutingPath } from "./Experiment";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service RoutingExperimentRpc
 */
export interface IRoutingExperimentRpcClient {
    /**
     * @generated from protobuf rpc: getRoutingPath(GetRoutingPath) returns (RoutingPath);
     */
    getRoutingPath(input: GetRoutingPath, options?: RpcOptions): UnaryCall<GetRoutingPath, RoutingPath>;
}
/**
 * @generated from protobuf service RoutingExperimentRpc
 */
export class RoutingExperimentRpcClient implements IRoutingExperimentRpcClient, ServiceInfo {
    typeName = RoutingExperimentRpc.typeName;
    methods = RoutingExperimentRpc.methods;
    options = RoutingExperimentRpc.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: getRoutingPath(GetRoutingPath) returns (RoutingPath);
     */
    getRoutingPath(input: GetRoutingPath, options?: RpcOptions): UnaryCall<GetRoutingPath, RoutingPath> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRoutingPath, RoutingPath>("unary", this._transport, method, opt, input);
    }
}
