// @generated by protobuf-ts 2.9.1 with parameter server_generic,generate_dependencies,long_type_number
// @generated from protobuf file "packages/autocertifier-client/protos/AutoCertifier.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AutoCertifierRpc } from "./AutoCertifier";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { HasSessionResponse } from "./AutoCertifier";
import type { HasSessionRequest } from "./AutoCertifier";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service AutoCertifierRpc
 */
export interface IAutoCertifierRpcClient {
    /**
     * @generated from protobuf rpc: hasSession(HasSessionRequest) returns (HasSessionResponse);
     */
    hasSession(input: HasSessionRequest, options?: RpcOptions): UnaryCall<HasSessionRequest, HasSessionResponse>;
}
/**
 * @generated from protobuf service AutoCertifierRpc
 */
export class AutoCertifierRpcClient implements IAutoCertifierRpcClient, ServiceInfo {
    typeName = AutoCertifierRpc.typeName;
    methods = AutoCertifierRpc.methods;
    options = AutoCertifierRpc.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: hasSession(HasSessionRequest) returns (HasSessionResponse);
     */
    hasSession(input: HasSessionRequest, options?: RpcOptions): UnaryCall<HasSessionRequest, HasSessionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<HasSessionRequest, HasSessionResponse>("unary", this._transport, method, opt, input);
    }
}
