import { RSAKeyPair } from '../../src/encryption/RSAKeyPair'
import { EncryptionUtil } from '../../src/encryption/EncryptionUtil'

describe('RSAKeyPair', () => {
    let RSAKeyPair: RSAKeyPair

    beforeEach(async () => {
        RSAKeyPair = await RSAKeyPair.create()
    }, 10000)

    it('rsa decryption after encryption equals the initial plaintext', () => {
        const plaintext = 'some random text'
        const ciphertext = EncryptionUtil.encryptWithRSAPublicKey(Buffer.from(plaintext, 'utf8'), RSAKeyPair.getPublicKey())
        expect(EncryptionUtil.decryptWithRSAPrivateKey(ciphertext, RSAKeyPair.getPrivateKey()).toString('utf8')).toStrictEqual(plaintext)
    })

    it('rsa decryption after encryption equals the initial plaintext (hex strings)', () => {
        const plaintext = 'some random text'
        const ciphertext = EncryptionUtil.encryptWithRSAPublicKey(Buffer.from(plaintext, 'utf8'), RSAKeyPair.getPublicKey(), true)
        expect(EncryptionUtil.decryptWithRSAPrivateKey(ciphertext, RSAKeyPair.getPrivateKey(), true).toString('utf8')).toStrictEqual(plaintext)
    })
})
