syntax = "proto3";
import "google/protobuf/any.proto";

option optimize_for = CODE_SIZE;

service DhtRpc {
  rpc getClosestPeers (ClosestPeersRequest) returns (ClosestPeersResponse);
}

// Used inside RpcMessage

message ClosestPeersRequest {
  PeerDescriptor peerDescriptor = 1;
  string nonce = 2; // requestId
}

message ClosestPeersResponse {
  repeated PeerDescriptor peers = 1;
  string nonce = 2; // requestId
}

message PeerDescriptor {
  bytes peerId = 1;
  NodeType type = 2;
  ConnectivityMethod udp = 3;
  ConnectivityMethod tcp = 4;
  ConnectivityMethod websocket = 5;
}

message ConnectivityMethod {
  uint32 port = 2;
  string ip = 3;
}

enum NodeType {
  NODEJS = 0;
  BROWSER = 1;
}

message RouteMessageWrapper {
  string sourceId = 1;
  string nonce = 2;
  string destinationId = 3;
  oneof message {
    google.protobuf.Any closestPeersRequest = 4;
    google.protobuf.Any closestPeersResponse = 5;
    google.protobuf.Any rtcOffer = 6;
    google.protobuf.Any rtcAnswer = 7;
    google.protobuf.Any iceCandidate = 8;
    google.protobuf.Any iceDescription = 9;
  }
}

// Correspond to the MessageType Enum

message ConnectivityRequestMessage {
  uint32 port = 1;
  //string nonce = 2; // requestId
}

message ConnectivityResponseMessage {
  bool open_internet = 1;
  string ip = 2;
  string natType = 3;
  //string nonce = 4; // requestId
}

message HandshakeMessage {
  string sourceId = 1;
  string protocolVersion = 2;  
}

message RpcMessage {
  map<string, string> header = 1;
  bytes body = 2;
  string requestId = 3;
  PeerDescriptor senderDescriptor = 4;
  PeerDescriptor targetDescriptor = 5;
}

// Wraps all messages

enum MessageType {
  CONNECTIVITY_REQUEST = 0;
  CONNECTIVITY_RESPONSE = 1;
  HANDSHAKE = 2;
  RPC = 3;
}

message Message {
  string messageId = 1;
  MessageType messageType = 2;
  bytes body = 3;
}
