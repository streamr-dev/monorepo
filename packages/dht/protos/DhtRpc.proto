syntax = "proto3";

option optimize_for = CODE_SIZE;

service DhtRpc {
  rpc getClosestPeers (ClosestPeersRequest) returns (ClosestPeersResponse);
  rpc ping (PingRequest) returns (PingResponse);
  rpc routeMessage (RouteMessageWrapper) returns (RouteMessageAck);
}

// Used inside RpcMessage

message ClosestPeersRequest {
  PeerDescriptor peerDescriptor = 1;
  string nonce = 2; // requestId
}

message ClosestPeersResponse {
  repeated PeerDescriptor peers = 1;
  string nonce = 2; // requestId
}

message PingRequest {
  string nonce = 1;
}

message PingResponse {
  string nonce = 1;
}

message PeerDescriptor {
  bytes peerId = 1;
  NodeType type = 2;
  ConnectivityMethod udp = 3;
  ConnectivityMethod tcp = 4;
  ConnectivityMethod websocket = 5;
}

message ConnectivityMethod {
  uint32 port = 2;
  string ip = 3;
}

enum NodeType {
  NODEJS = 0;
  BROWSER = 1;
}

message ConnectivityReportRequest {
  uint32 port = 1;
  string nonce = 2; // requestId
}

message ConnectivityReportResponse {
  string open_internet = 1;
  string ip = 2;
  string natType = 3;
  string nonce = 4; // requestId
}

enum RouteMessageType {
  RPC_WRAPPER = 0;
}

message RouteMessageWrapper {
  PeerDescriptor sourcePeer = 1;
  string nonce = 2;
  PeerDescriptor destinationPeer = 3;
  PeerDescriptor previousPeer = 4;
  RouteMessageType messageType = 5;
  bytes message = 6;
}

message RouteMessageAck {
  PeerDescriptor sourcePeer = 1;
  string nonce = 2;
  PeerDescriptor destinationPeer = 3;
  string error = 4;
}

// Correspond to the MessageType Enum

message ConnectivityRequestMessage {
  uint32 port = 1;
  //string nonce = 2; // requestId
}

message ConnectivityResponseMessage {
  bool open_internet = 1;
  string ip = 2;
  string natType = 3;
  //string nonce = 4; // requestId
}

message HandshakeMessage {
  bytes sourceId = 1;
  string protocolVersion = 2;  
}

message RpcMessage {
  map<string, string> header = 1;
  bytes body = 2;
  string requestId = 3;
  PeerDescriptor sourceDescriptor = 4;
  PeerDescriptor targetDescriptor = 5;
}

// Wraps all messages

enum MessageType {
  CONNECTIVITY_REQUEST = 0;
  CONNECTIVITY_RESPONSE = 1;
  HANDSHAKE = 2;
  RPC = 3;
}

message Message {
  string messageId = 1;
  MessageType messageType = 2;
  bytes body = 3;
}
