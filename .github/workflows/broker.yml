---
# Lint, Test and Publish
name: Broker

on:
  push:
    tags:
      - "*"
    branches:
      - main
  pull_request:
    branches:
      - '*'
  schedule:
    # run every day at 00:00
    - cron: '0 0 * * *'
  workflow_dispatch:

concurrency:
  group: broker-build-${{ github.head_ref }}
  cancel-in-progress: true
defaults:
  run:
    working-directory: packages/broker

jobs:
  test-unit:
    name: Test Unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: package-lock.json
          node-version-file: '.nvmrc'

      - name: bootstrap-pkg
        working-directory: './'
        run: |
          npm run bootstrap-pkg streamr-client
          npm run bootstrap-pkg streamr-broker
      - run: npm run eslint
      - run: npm run test-unit

  test-integration:
    name: Test Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: package-lock.json
          node-version-file: '.nvmrc'
      - name: bootstrap-pkg
        working-directory: './'
        run: |
          npm run bootstrap-pkg streamr-client
          npm run bootstrap-pkg streamr-broker
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0
        with:
          services-to-start: "cassandra init-keyspace parity-sidechain-node0 graph-deploy-streamregistry-subgraph"
      - run: npm run test-integration
        env:
          CI: true
          LOG_LEVEL: warn
      - name: Stop Streamr Docker Stack
        if: always()
        run: |
          docker kill $(docker ps -q)
          docker rm $(docker ps -a -q)

  test-docker:
    name: "Docker Image: test"
    uses: ./.github/workflows/docker-build.yml
    with:
      docker_file: ./Dockerfile.broker
      test_services_to_start: "parity-node0 broker-node-no-storage-1"
      build_platform: linux/amd64
      test_script: |
        for (( i=0; i < 5; i=i+1 )); do
            curl -s http://localhost:8791/volume;
            res=$?;
            if test "$res" != "0"; then
                echo "Attempting to connect to broker retrying in $wait_time seconds";
                sleep $wait_time;
                wait_time=$(( 2*wait_time )) ;
            else
                exit 0
            fi;
        done;
        exit 1

  docker-push:
    name: "Docker Image: push"
    needs: [test-unit, test-integration, test-docker]
    runs-on: self-hosted
    # only push for nightly runs and manual triggers
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}

    steps:
      - uses: actions/checkout@v3
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-v1-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-v1-
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
        with:
          driver-opts: |
            network=host
      - uses: docker/login-action@v1.14.1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta_failure
        uses: docker/metadata-action@v3.6.2
        # if test steps failed, push sha anyway
        if: ${{ always() && (needs.test-unit.result == 'failure' || needs.test-integration.result == 'failure' || needs.test-docker.result == 'failure') }}
        with:
          images: streamr/broker-node
          tags: |
            type=sha
            type=ref,event=branch
            type=raw,value=debug
      - name: Docker meta
        id: docker_meta_success
        uses: docker/metadata-action@v3.6.2
        # if test steps succeeded
        if: ${{ always() && !(needs.test-unit.result == 'failure' || needs.test-integration.result == 'failure' || needs.test-docker.result == 'failure') }}
        with:
          images: streamr/broker-node
          tags: |
            type=sha
            type=ref,event=branch
            type=semver,pattern=v{{version}}
            type=raw,value=dev
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && startsWith(github.ref, 'refs/tags/v') }}
            type=schedule,pattern=nightly
      - name: Setup qemu
        uses: docker/setup-qemu-action@v1.2.0
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
        with:
          driver-opts: |
            network=host
      - name: Build & Push
        uses: docker/build-push-action@v2.10.0
        with:
          context: .
          file: ./Dockerfile.broker
          platforms: linux/amd64,linux/arm64
          push: true
          load: false
          build-args: |
            NODE_ENV=production
          # only one of these should have tags
          tags: ${{ steps.docker_meta_success.outputs.tags }}${{ steps.docker_meta_failure.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
