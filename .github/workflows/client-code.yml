---
# Any tests that can run without building should go in here.
name: Client â€“ Lint, Unit, Integration Tests

# Be sure to update both workflow files if you edit any env or trigger config
env:
  CI: true
  DEBUG_COLORS: true
  DEBUG: "Streamr*"
on:
  push:
    tags:
      - '*'
    branches:
      - main
  pull_request:
    branches:
      - '*'
  schedule:
    # run every day at 00:00
    - cron: '0 0 * * *'
concurrency:
  group: client-code-build-${{ github.head_ref }}
  cancel-in-progress: true
defaults:
  run:
    working-directory: packages/client

jobs:
  lint:
    name: Run linter using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            packages/*/package-lock.json
      - name: npm ci
        working-directory: './'
        run: |
          npm ci
          npm run bootstrap-pkg streamr-client
      - name: npm run eslint
        run: npm run eslint

  test:
    name: Test Unit using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    env:
      TEST_REPEATS: 5
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            packages/*/package-lock.json
      - name: npm ci
        working-directory: './'
        run: |
          npm ci
          npm run bootstrap-pkg streamr-client
      - name: test-unit
        timeout-minutes: 7
        run: npm run test-unit

  integration:
    name: ${{ matrix.test-name }} ${{ matrix.websocket-url.name }} using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [14.x]
        test-name: [
          "test-integration-no-resend",
          "test-integration-resend",
        ]
        websocket-url:
          - name: "default"
            url: ""
          - name: "single-node-only"
            url: "ws://localhost:8690/api/v1/ws"
    env:
      TEST_NAME: ${{ matrix.test-name }}
      WEBSOCKET_URL: ${{ matrix.websocket-url.url}}
      TEST_REPEATS: 2

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            packages/*/package-lock.json
      - name: npm ci
        working-directory: './'
        run: |
          npm ci
          npm run bootstrap-pkg streamr-client
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.3
        with:
          services-to-start: "mysql redis core-api cassandra parity-node0 parity-sidechain-node0 bridge brokers trackers nginx smtp"
      - name: Run Test
        run: npm run $TEST_NAME
      - name: Stop Streamr Docker Stack
        if: always()
        run: |
          docker kill $(docker ps -q)
          docker rm $(docker ps -a -q)
      - name: Collect docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2.0.2
        with:
          dest: 'packages/client/logs'
      - name: Upload logs to GitHub
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: docker-logs-${{ matrix.test-name }}-${{ matrix.websocket-url.name }}-node${{ matrix.node-version }}--${{ github.run_number }}-${{ github.run_id }}
          path: packages/client/logs

  flakey:
    if: ${{ false }}
    name: Flakey Tests using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            packages/*/package-lock.json
      - name: npm ci
        working-directory: './'
        run: |
          npm ci
          npm run bootstrap-pkg streamr-client
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.3
        with:
          services-to-start: "mysql redis core-api cassandra parity-node0 parity-sidechain-node0 bridge brokers trackers nginx smtp"
      - uses: nick-invision/retry@v2
        name: Run Test
        with:
          max_attempts: 2
          timeout_minutes: 15
          retry_on: error
          command: cd packages/client && npm run test-flakey || echo "::warning::Flakey Tests Failed"
      - name: Stop Streamr Docker Stack
        if: always()
        run: |
          docker kill $(docker ps -q)
          docker rm $(docker ps -a -q)

  memory:
    if: ${{ false }}
    name: Memory Tests using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            packages/*/package-lock.json
      - name: npm ci
        working-directory: './'
        run: |
          npm ci
          npm run bootstrap-pkg streamr-client
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.3
        with:
          services-to-start: "mysql redis core-api cassandra parity-node0 parity-sidechain-node0 bridge brokers trackers nginx smtp"
      - uses: nick-invision/retry@v2
        name: Run Test
        with:
          max_attempts: 2
          timeout_minutes: 20
          retry_on: error
          command: cd packages/client && npm run test-memory
      - name: Stop Streamr Docker Stack
        if: always()
        run: |
          docker kill $(docker ps -q)
          docker rm $(docker ps -a -q)
