name: test-utils â€“ Lint, Test and Publish

on:
  push:
    tags:
      - '*'
    branches:
      - main
  pull_request:
    branches:
      - '*'
  schedule:
    # run every day at 00:00
    - cron:  '0 0 * * *'

defaults:
  run:
    working-directory: packages/test-utils

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          all_but_latest: true
          access_token: ${{ github.token }}

  test-unit:
    name: Lint & Unit Test on Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2.3.5
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            'package-lock.json'
            'packages/*/package-lock.json'

      - name: npm ci
        working-directory: './'
        run: |
          npm ci
          npm run bootstrap-pkg streamr-test-utils

      - name: eslint
        run: npm run eslint

      - name: test
        run: npm run test

  publish:
    needs: [test-unit]
    name: Publishing main using Node 16
    runs-on: ubuntu-latest

    # run job only for tags and skip for cron
    if: false && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    steps:
      - name: Get the release version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - uses: actions/checkout@v2.3.5
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
          cache: 'npm'
          cache-dependency-path: |
            'package-lock.json'
            'packages/*/package-lock.json'

      - name: npm ci
        working-directory: './'
        run: |
          npm ci
          npm run bootstrap-pkg streamr-test-utils

      - name: Publish beta ${{ steps.get_version.outputs.VERSION }}
        # if tag includes beta keyword
        if: contains(steps.get_version.outputs.VERSION, 'beta') == true
        run: npm publish --tag beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish latest ${{ steps.get_version.outputs.VERSION }}
        # if tag doesn't include beta keyword
        if: contains(steps.get_version.outputs.VERSION, 'beta') == false
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
