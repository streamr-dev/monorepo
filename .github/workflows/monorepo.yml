name: monorepo

on:
  push:
    tags:
      - '*'
    branches:
      - main
  pull_request:
    branches:
      - '*'

concurrency:
  group: build-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: build
        uses: ./.github/workflows/reusable/cached-build
      - name: versions
        run: npm run versions
      - name: check
        run: npm run check
      - name: eslint
        run: npm run eslint
  test-utils:
    needs: [build]
    uses: ./.github/workflows/test-setup.yml
    with:
      package: test-utils
  utils:
    needs: [ build ]
    uses: ./.github/workflows/test-setup.yml
    with:
      package: utils
  protocol:
    needs: [ build ]
    uses: ./.github/workflows/test-setup.yml
    with:
      package: protocol
  network:
    needs: [ build ]
    uses: ./.github/workflows/test-setup.yml
    with:
      package: network
  network-browser:
    needs: [ build ]
    uses: ./.github/workflows/test-setup.yml
    with:
      package: network
      command: |
        sudo apt-get install xvfb
        xvfb-run --auto-servernum npm run test-browser
  tracker:
    needs: [ build ]
    uses: ./.github/workflows/test-setup.yml
    with:
      package: network-tracker
  client:
    needs: [ build ]
    uses: ./.github/workflows/test-setup.yml
    with:
      package: client
      command: |
        npm run test-unit
        npm run test-integration
  broker:
    needs: [ build ]
    uses: ./.github/workflows/test-setup.yml
    with:
      package: broker
      command: npm run test-unit
  broker-e2e:
    needs: [ build ]
    uses: ./.github/workflows/test-setup.yml
    with:
      package: broker
      command: npm run test-integration
      docker-services: "cassandra init-keyspace parity-sidechain-node0 graph-deploy-streamregistry-subgraph"
  client-e2e-chunkify:
    needs: [ build ]
    runs-on: ubuntu-latest
    outputs:
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      test-chunk-ids: ${{ steps['set-test-chunk-ids'].outputs['test-chunk-ids'] }}
    steps:
      - uses: actions/checkout@v3
      - name: build (cached)
        uses: ./.github/workflows/reusable/cached-build
      - id: set-test-chunks
        name: Set Chunks
        working-directory: 'packages/client'
        run: echo "::set-output name=test-chunks::$(npx jest --listTests --json test/end-to-end | jq -cM '[_nwise(length / 2 | ceil)]')"
      - id: set-test-chunk-ids
        name: Set Chunk IDs
        working-directory: 'packages/client'
        run: echo "::set-output name=test-chunk-ids::$(echo $CHUNKS | jq -cM 'to_entries | map(.key)')"
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
  client-e2e:
    needs: [ client-e2e-chunkify ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: ${{ fromJson(needs['client-e2e-chunkify'].outputs['test-chunk-ids']) }}
    steps:
      - uses: actions/checkout@v3
      - name: build (cached)
        uses: ./.github/workflows/reusable/cached-build
      - uses: streamr-dev/streamr-docker-dev-action@v1.0.0
        with:
          services-to-start: "cassandra init-keyspace parity-sidechain-node0 graph-deploy-streamregistry-subgraph chainlink"
      - name: run brokers and trackers
        uses: ./.github/workflows/reusable/run-brokers-and-trackers
      - name: test
        working-directory: 'packages/client'
        run: echo $CHUNKS | jq '.[${{ matrix.chunk }}] | .[] | @text' | xargs npx jest --forceExit
        env:
          CHUNKS: ${{ needs['client-e2e-chunkify'].outputs['test-chunks'] }}
  tracker-docker-image-test:
    uses: ./.github/workflows/docker-build.yml
    with:
      docker_file: ./Dockerfile.tracker
      test_services_to_start: tracker-1
      build_platforms: linux/amd64
      image_name: streamr/tracker
      test_script: |
        for (( i=0; i < 5; i=i+1 )); do
            docker inspect --format '{{json .State.Health }}' streamr-dev-tracker-1
            curl -s http://localhost:30301/topology;
            res=$?;
            if test "$res" != "0"; then
                echo "Attempting to connect to tracker retrying in $wait_time seconds";
                sleep $wait_time;
                wait_time=$(( 2*wait_time )) ;
            else
                exit 0
            fi;
        done;
        exit 1
  tracker-docker-image-push:
    needs: [ tracker, tracker-docker-image-test ]
    # only push for nightly runs and manual triggers
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    uses: ./.github/workflows/docker-build.yml
    with:
      docker_file: ./Dockerfile.tracker
      image_name: streamr/tracker
      build_platforms: linux/amd64
      push_image: true
      test_success: ${{ !(needs.tracker.result == 'failure' || needs.test-docker-image.result == 'failure') }}
    secrets:
      dockerhub_username: ${{secrets.DOCKERHUB_USERNAME}}
      dockerhub_token: ${{secrets.DOCKERHUB_TOKEN}}
